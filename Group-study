# ================================================================
# Note: Replace placeholders such as <your-username>, <your_account_id>, 
# and <your_ecr_image_url> with your own information.
# ================================================================

Step 1: System Update and AWS CLI Installation
===============================================
sudo yum update -y
curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
unzip awscliv2.zip
sudo ./aws/install
aws --version

===============================================
Step 2: Set up Kubernetes repository
===============================================

cat <<EOF | sudo tee /etc/yum.repos.d/kubernetes.repo
[kubernetes]
name=Kubernetes
baseurl=https://pkgs.k8s.io/core:/stable:/v1.31/rpm/
enabled=1
gpgcheck=1
gpgkey=https://pkgs.k8s.io/core:/stable:/v1.31/rpm/repodata/repomd.xml.key
EOF

==============================================================================
Step 3: Install Docker, Kubernetes CLI, and start services
==============================================================================

sudo yum install -y docker kubectl kubeadm kubelet
systemctl start docker
systemctl enable docker
systemctl enable --now kubelet
yum update -y
systemctl start kubelet
systemctl enable kubelet

==============================================================================
Step 4: Install eksctl
==============================================================================

curl --silent --location "https://github.com/weaveworks/eksctl/releases/download/0.69.0/eksctl_Linux_amd64.tar.gz" | tar xz -C /tmp
sudo mv /tmp/eksctl /usr/local/bin
aws configure

==============================================================================
Step 5: Clone Git repository and authenticate Docker with AWS ECR
==============================================================================

sudo yum install git -y
git clone https://github.com/<your-username>/cicd-pipeline-train-schedule-kubernetes.git
aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin <your_account_id>.dkr.ecr.us-east-1.amazonaws.com

==============================================================================
Step 6: Build, tag, and push Docker image to ECR
==============================================================================

cd cicd-pipeline-train-schedule-kubernetes/
docker build -t trainschedulerepo:latest .
docker tag trainschedulerepo:latest <your_account_id>.dkr.ecr.us-east-1.amazonaws.com/trainschedulerepo:latest
docker push <your_account_id>.dkr.ecr.us-east-1.amazonaws.com/trainschedulerepo:latest

==============================================================================
Step 7: Configure Kubernetes cluster and check status
==============================================================================

aws eks --region us-east-1 update-kubeconfig --name trainSchedule-cluster
kubectl get nodes
kubectl get pods

==============================================================================
Step 8: Deploy and expose application with Kubernetes
==============================================================================

nano deployment.yaml

>>>>>>>>>>>>>>>>>>>> Add the following content >>>>>>>>>>>>>>>>
apiVersion: apps/v1
kind: Deployment
metadata:
  name: train-schedule-app
spec:
  replicas: 2
  selector:
    matchLabels:
      app: train-schedule-app
  template:
    metadata:
      labels:
        app: train-schedule-app
    spec:
      containers:
      - name: train-schedule-app
        image: <your_ecr_image_url>  ## Replace with your ECR image URL
        ports:
        - containerPort: 80
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
NOTE: Replace <your_ecr_image_url> with your actual ECR image URL.

kubectl apply -f deployment.yaml    
nano service.yaml

>>>>>>>>>>>>>>>>>>>> Add the following content >>>>>>>>>>>>>>>>
apiVersion: v1
kind: Service
metadata:
  name: train-schedule-service
spec:
  type: LoadBalancer
  ports:
    - port: 80
  selector:
    app: train-schedule-app
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

kubectl apply -f service.yaml

==============================================================================
Step 9: Verify application deployment
==============================================================================
kubectl get service
kubectl get pods
kubectl get pod -o wide
kubectl get pods --all-namespaces
kubectl get pods --all-namespaces -o wide
